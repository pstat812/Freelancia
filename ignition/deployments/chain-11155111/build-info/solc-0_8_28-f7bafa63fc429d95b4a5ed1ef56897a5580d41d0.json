{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-f7bafa63fc429d95b4a5ed1ef56897a5580d41d0",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/TaskEscrow.sol": "project/contracts/TaskEscrow.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/TaskEscrow.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract TaskEscrow is ReentrancyGuard {\n    IERC20 public pyusdToken;\n    \n    struct Task {\n        string taskId;\n        address client;\n        uint256 amount;\n        uint256 deadline;\n        bool fundsDeposited;\n        uint256 createdAt;\n    }\n    \n    mapping(string => Task) public tasks;\n    mapping(string => address) public taskFreelancers;\n    \n    event TaskCreated(string indexed taskId, address indexed client, uint256 amount);\n    event FundsDeposited(string indexed taskId, address indexed client, uint256 amount);\n    event FundsReleased(string indexed taskId, address indexed freelancer, uint256 amount);\n    \n    constructor(address _pyusdToken) {\n        require(_pyusdToken != address(0), \"Invalid PYUSD token address\");\n        pyusdToken = IERC20(_pyusdToken);\n    }\n    \n\n    function depositForTask(\n        string memory taskId,\n        uint256 amount,\n        uint256 deadline\n    ) external nonReentrant {\n        require(bytes(taskId).length > 0, \"Task ID cannot be empty\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(deadline > block.timestamp, \"Deadline must be in the future\");\n        require(tasks[taskId].client == address(0), \"Task already exists\");\n        \n        // Transfer PYUSD from client to this contract\n        require(\n            pyusdToken.transferFrom(msg.sender, address(this), amount),\n            \"PYUSD transfer failed\"\n        );\n        \n        // Store task info\n        tasks[taskId] = Task({\n            taskId: taskId,\n            client: msg.sender,\n            amount: amount,\n            deadline: deadline,\n            fundsDeposited: true,\n            createdAt: block.timestamp\n        });\n        \n        emit TaskCreated(taskId, msg.sender, amount);\n        emit FundsDeposited(taskId, msg.sender, amount);\n    }\n    \n\n    function getTask(string memory taskId) external view returns (Task memory) {\n        return tasks[taskId];\n    }\n    \n\n    function hasFundsDeposited(string memory taskId) external view returns (bool) {\n        return tasks[taskId].fundsDeposited;\n    }\n    \n    function getContractBalance() external view returns (uint256) {\n        return pyusdToken.balanceOf(address(this));\n    }\n    \n    function assignFreelancer(string memory taskId, address freelancer) external {\n        require(tasks[taskId].fundsDeposited, \"Funds not deposited\");\n        require(freelancer != address(0), \"Invalid freelancer address\");\n        require(taskFreelancers[taskId] == address(0), \"Freelancer already assigned\");\n        \n        taskFreelancers[taskId] = freelancer;\n    }\n    \n    function releasePayment(string memory taskId) external nonReentrant {\n        Task memory task = tasks[taskId];\n        require(task.fundsDeposited, \"No funds deposited for this task\");\n        \n        address freelancer = taskFreelancers[taskId];\n        require(freelancer != address(0), \"No freelancer assigned\");\n        \n        require(\n            msg.sender == task.client || msg.sender == freelancer,\n            \"Only client or assigned freelancer can release payment\"\n        );\n        \n        uint256 amount = task.amount;\n        \n        tasks[taskId].fundsDeposited = false;\n        \n        require(\n            pyusdToken.transfer(freelancer, amount),\n            \"PYUSD transfer failed\"\n        );\n        \n        emit FundsReleased(taskId, freelancer, amount);\n    }\n}\n\n"
      }
    }
  }
}